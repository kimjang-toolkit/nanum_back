AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  nanum_back

  모든 자취생을 위한 나눔장 프로젝트!
  항상 안전하게 테스트하기!

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
Parameters:
  CoBuyingTableName:
    Type: String
    Description: 공구방 테이블을 위한 테이블
    Default: "CoBuyingTable"

  REGIONNAME:
    Type: String
    Description: Default region for deployment.
    Default: "ap-northeast-2"

  AWSENVNAME:
    Type: String
    Description: AWS Environment where code is being executed (AWS_SAM_LOCAL or AWS).
    Default: "AWS_SAM_LOCAL"

  DEVENVNAME:
    Type: String
    Description: Developer environment where code is being executed (OSX, Windows, or Linux).
    Default: "OSX"
  DYNAMO_DB_URL:
    Type: String
    Description: 실행 환경에 따른 DynamoDB Endpoint

Resources:
  CreateCoBuyingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: 공구방 생성 함수
    Properties:
      CodeUri: event-func/cobuying
      Handler: post.createCoBuyingHandler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 200
      Architectures:
        - x86_64
      Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
        CreateCoBuying:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties: # 엔드포인트: POST /co-buying
            Path: /api/co-buying # API Gateway 경로
            Method: post # HTTP 메서드
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoBuyingTableName
      Environment:
        Variables:
          CoBuyingTableName: !Ref CoBuyingTableName
          REGION: !Ref REGIONNAME
          AWSENV: !Ref AWSENVNAME
          DEVENV: !Ref DEVENVNAME
          DYNAMO_DB_URL: !Ref DYNAMODBURL
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - post.ts

  GetCoBuyingByIdFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: 공구방 생성 함수
    Properties:
      CodeUri: event-func/cobuying
      Handler: get.getCoBuyingByIdHandler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 200
      Architectures:
        - x86_64
      Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
        CreateCoBuying:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties: # 엔드포인트: POST /co-buying
            Path: /api/co-buying/{id} # API Gateway 경로
            Method: get # HTTP 메서드
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoBuyingTableName
      Environment:
        Variables:
          CoBuyingTableName: !Ref CoBuyingTableName
          REGION: !Ref REGIONNAME
          AWSENV: !Ref AWSENVNAME
          DEVENV: !Ref DEVENVNAME
          DYNAMO_DB_URL: !Ref DYNAMODBURL
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - get.ts

  CoBuyingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CoBuyingTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # 파티션 키
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      # GlobalSecondaryIndexes:
      #   IndexName: CoBuyingIndex
      #   KeySchema:
      #     - AttributeName: ProductId
      #       KeyType: RANGE # GSI 정렬 키로 ProductId 사용
      #   Projection:
      #     ProjectionType: ALL
      #   ProvisionedThroughput:
      #     ReadCapacityUnits: 5
      #     WriteCapacityUnits: 5

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  CreateCoBuyingApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/co-buying/"
  CreateCoBuyingFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt CreateCoBuyingFunction.Arn
  CreateCoBuyingFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt CreateCoBuyingFunctionRole.Arn
