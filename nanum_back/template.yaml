AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  nanum_back

  모든 자취생을 위한 나눔장 프로젝트!
  항상 안전하게 테스트하기!

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        CoBuyingTableName: !Ref CoBuyingTableName
        REGIONNAME: !Ref REGIONNAME
        AWSENVNAME: !Ref AWSENVNAME
        DEVENVNAME: !Ref DEVENVNAME
        DYNAMODBURL: !Ref DYNAMODBURL
        DYNAMODBHOST: !Ref DYNAMODBHOST
        DYNAMODBPORT: !Ref DYNAMODBPORT
        DBPROTOCAL: !Ref DBPROTOCAL
        DEPLOYSTAGE: !Ref DEPLOYSTAGE
        DOMAINNAME: !Ref DOMAINNAME
Parameters:
  CoBuyingTableName:
    Type: String
    Description: 공구방 테이블을 위한 테이블
    Default: "CoBuyingTable"

  REGIONNAME:
    Type: String
    Description: Default region for deployment.
    Default: "ap-northeast-2"

  AWSENVNAME:
    Type: String
    Description: AWS Environment where code is being executed (AWS_SAM_LOCAL or AWS).
    Default: "AWS_SAM_LOCAL"

  DEVENVNAME:
    Type: String
    Description: Developer environment where code is being executed (OSX, Windows, or Linux).
    Default: "OSX"
  DYNAMODBURL:
    Type: String
    Description: 실행 환경에 따른 DynamoDB Endpoint
    Default: "https://dynamodb.ap-northeast-2.amazonaws.com"
  DYNAMODBHOST:
    Type: String
  DYNAMODBPORT:
    Type: String
  DBPROTOCAL:
    Type: String
    Description: DynamoDB 연결 프로토콜
    Default: "http:"
  DEPLOYSTAGE:
    Type: String
    Description: 배포 스테이지
    Default: "Stg"
  DOMAINNAME:
    Type: String
    Description: 도메인 이름
    Default: "gonggong99.store"
  # AUTHSECRETKEY:
  #   Type: String
  #   Description: 비밀번호 암호화를 위한 키
  #   Default: 'abcd1234~~!!'

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: GongGong99Stage
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'content-type, GongGong99-AccessToken, GongGong99-RefreshToken'"
        AllowOrigin: !Sub "'${DOMAINNAME}'"
      # Domain:
      #   DomainName: gonggong99.store
      #   CertificateArn: arn:aws:acm:ap-northeast-2:471112633394:certificate/bd06d2bd-8313-4e46-a6e7-7ca181a42875
      #   EndpointConfiguration: REGIONAL
      #   Route53:
      #     HostedZoneId: Z01403231VQZJXPO5YXTM

  # 2. Route 53 A Record
  # Route53Record:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId: Z01403231VQZJXPO5YXTM # 호스팅 영역 ID
  #     Name: gonggong99.store
  #     Type: A
  #     AliasTarget:
  #       DNSName: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Stage/co-buying/"
  #       HostedZoneId: Z20JF4UZKIW1U8 # API Gateway 배포 호스트 영역 ID

  CreateCoBuyingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: 공구방 생성 함수
    Properties:
      FunctionName: !Sub "${DEPLOYSTAGE}-CreateCoBuyingFunction"
      CodeUri: event-func/control/cobuying
      Handler: saveCoBuyingOneCTL.createCoBuyingHandler
      Runtime: nodejs20.x
      MemorySize: 2048
      Timeout: 20
      Architectures:
        - x86_64
      Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
        CreateCoBuying:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties: # 엔드포인트: POST /co-buying
            Path: /api/co-buying # API Gateway 경로
            Method: post # HTTP 메서드
            RestApiId:
              Ref: ApiGatewayApi # API Gateway와 직접 연결
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoBuyingTableName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - saveCoBuyingOneCTL.ts

  AuthenticateOwnerAuthFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: 공구장 인증 함수
    Properties:
      FunctionName: !Sub "${DEPLOYSTAGE}-AuthenticateOwnerAuthFunction"
      CodeUri: event-func/control/auth
      Handler: authenticateOwnerAuthCTL.authenticateOwnerAuth
      Runtime: nodejs20.x
      MemorySize: 2048
      Timeout: 20
      Architectures:
        - x86_64
      Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
        CreateCoBuying:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties: # 엔드포인트: POST /auth
            Path: /api/co-buying/auth/{coBuyingId} # API Gateway 경로
            Method: post # HTTP 메서드
            RestApiId:
              Ref: ApiGatewayApi # API Gateway와 직접 연결
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoBuyingTableName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - authenticateOwnerAuthCTL.ts

  ApplicationsInCoBuyingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: 공구방 참여 함수
    Properties:
      FunctionName: !Sub "${DEPLOYSTAGE}-ApplicationsInCoBuyingFunction"
      CodeUri: event-func/control/application
      Handler: applicationsInCoBuyingCTL.applicationsInCoBuyingHandler
      Runtime: nodejs20.x
      MemorySize: 2048
      Timeout: 20
      Architectures:
        - x86_64
      Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
        ApplicationsInCoBuying:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties: # 엔드포인트: POST /manage/participation
            Path: /api/co-buying/applications # API Gateway 경로
            Method: post # HTTP 메서드
            RestApiId:
              Ref: ApiGatewayApi # API Gateway와 직접 연결
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoBuyingTableName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - applicationsInCoBuyingCTL.ts

  GetCoBuyingDetailFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: 공구방 생성 함수
    Properties:
      FunctionName: !Sub "${DEPLOYSTAGE}-GetCoBuyingDetailFunction"
      CodeUri: event-func/control/cobuying
      Handler: queryCoBuyingDetailOneCTL.getCoBuyingDetailHandler
      Runtime: nodejs20.x
      MemorySize: 2048
      Timeout: 20
      Architectures:
        - x86_64
      Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
        GetCoBuyingOne:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties: # 엔드포인트: POST /co-buying
            Path: /api/co-buying/{coBuyingId} # API Gateway 경로
            Method: get # HTTP 메서드
            RestApiId:
              Ref: ApiGatewayApi # API Gateway와 직접 연결
            RequestParameters: # 쿼리 매개변수 정의
              - method.request.querystring.ownerName:
                  Required: true
              - method.request.querystring.createdAt:
                  Required: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoBuyingTableName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - queryCoBuyingDetailOneCTL.ts

  # GetCoBuyingByIdFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Description: 공구방 생성 함수
  #   Properties:
  #     CodeUri: event-func/control/cobuying
  #     Handler: queryCoBuyingOneCTL.getCoBuyingByIdHandler
  #     Runtime: nodejs20.x
  #     MemorySize: 2048
  #     Timeout: 20
  #     Architectures:
  #       - x86_64
  #     Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
  #       GetCoBuyingOne:
  #         Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties: # 엔드포인트: POST /co-buying
  #           Path: /api/co-buying # API Gateway 경로
  #           Method: get # HTTP 메서드
  #           RestApiId:
  #             Ref: ApiGatewayApi # API Gateway와 직접 연결
  #           RequestParameters: # 쿼리 매개변수 정의
  #             - method.request.querystring.ownerName:
  #                 Required: true
  #             - method.request.querystring.createdAt:
  #                 Required: true
  #             - method.request.querystring.id:
  #                 Required: true
  #     Policies:
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref CoBuyingTableName
  #   Metadata: # Manage esbuild properties
  #     BuildMethod: esbuild
  #     BuildProperties:
  #       Minify: true
  #       Target: "es2020"
  #       Sourcemap: true
  #       EntryPoints:
  #         - queryCoBuyingOneCTL.ts

  GetCoBuyingListFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: 공구방 생성 함수
    Properties:
      FunctionName: !Sub "${DEPLOYSTAGE}-GetCoBuyingListFunction"
      CodeUri: event-func/control/cobuying
      Handler: queryCoBuyingListCTL.getCoBuyingListHandler
      Runtime: nodejs20.x
      MemorySize: 2048
      Timeout: 20
      Architectures:
        - x86_64
      Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
        GetCoBuyingList:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties: # 엔드포인트: POST /co-buying
            Path: /api/co-buying/page # API Gateway 경로
            Method: get # HTTP 메서드
            RestApiId:
              Ref: ApiGatewayApi # API Gateway와 직접 연결
            RequestParameters: # 쿼리 매개변수 정의
              - method.request.querystring.id:
                  Required: false
              - method.request.querystring.createdAt:
                  Required: false
              - method.request.querystring.ownerName:
                  Required: false
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoBuyingTableName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - queryCoBuyingListCTL.ts

  CoBuyingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${DEPLOYSTAGE}-CoBuyingTable"
      AttributeDefinitions:
        - AttributeName: createdAt # 공구글 생성일로 파티셔닝
          AttributeType: S
        # - AttributeName: deadline
        #   AttributeType: S # 마감일 기준 정렬
        - AttributeName: id
          AttributeType: S # ID
        - AttributeName: ownerName
          AttributeType: S # 공구장 이름
        - AttributeName: createdAtId
          AttributeType: S # 생성일자와 id
        - AttributeName: deadlineId
          AttributeType: S # 마감일자와 id
        - AttributeName: deletedYN
          AttributeType: S # 삭제 여부
      KeySchema:
        - AttributeName: ownerName
          KeyType: HASH # 파티션 키는 ownerName
        - AttributeName: id
          KeyType: RANGE # 정렬 키는 createdAt#id
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: createdAt
              KeyType: HASH # 파티션 키는 createdAt
            - AttributeName: id
              KeyType: RANGE # 정렬 키는 id
          Projection:
            ProjectionType: ALL # 인덱스에 모든 속성 포함
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        # - IndexName: DeadlineIndex # 기존 인덱스 삭제 후 새로운 인덱스 작성
        #   KeySchema:
        #     - AttributeName: deadline
        #       KeyType: HASH # 파티션 키는 deadline
        #     - AttributeName: id
        #       KeyType: RANGE # 정렬 키는 id
        #   Projection:
        #     ProjectionType: ALL # 인덱스에 모든 속성 포함
        #   ProvisionedThroughput:
        #     ReadCapacityUnits: 5
        #     WriteCapacityUnits: 5
        - IndexName: DeadlineIndex
          KeySchema:
            - AttributeName: deletedYN
              KeyType: HASH # 파티션 키는 deadline
            - AttributeName: deadlineId
              KeyType: RANGE # 정렬 키는 id
          Projection:
            ProjectionType: ALL # 인덱스에 모든 속성 포함
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: PagenationIndex
          KeySchema:
            - AttributeName: deletedYN
              KeyType: HASH # 파티션 키는 deletedYN
            - AttributeName: createdAtId
              KeyType: RANGE # 정렬 키는 createdAtId
          Projection:
            ProjectionType: ALL # 인덱스에 모든 속성 포함
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  CreateCoBuyingApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/co-buying/"
  CreateCoBuyingFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt CreateCoBuyingFunction.Arn # 템플릿에 작성된 함수의 논리적 식별자 사용
  CreateCoBuyingFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt CreateCoBuyingFunctionRole.Arn
