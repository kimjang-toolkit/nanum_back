AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  nanum_back

  모든 자취생을 위한 나눔장 프로젝트!
  항상 안전하게 테스트하기!

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        CoBuyingTableName: !Ref CoBuyingTableName
        REGIONNAME: !Ref REGIONNAME
        AWSENVNAME: !Ref AWSENVNAME
        DEVENVNAME: !Ref DEVENVNAME
        DYNAMODBURL: !Ref DYNAMODBURL
        DYNAMODBHOST: !Ref DYNAMODBHOST
        DYNAMODBPORT: !Ref DYNAMODBPORT
        DBPROTOCAL: !Ref DBPROTOCAL
        DEPLOYSTAGE: !Ref DEPLOYSTAGE
        DOMAINNAME: !Ref DOMAINNAME
        S3BUCKETNAME: !Ref S3BUCKETNAME
Parameters:
  CoBuyingTableName:
    Type: String
    Description: 공구방 테이블을 위한 테이블
    Default: "CoBuyingTable"

  REGIONNAME:
    Type: String
    Description: Default region for deployment.
    Default: "ap-northeast-2"

  AWSENVNAME:
    Type: String
    Description: AWS Environment where code is being executed (AWS_SAM_LOCAL or AWS).
    Default: "AWS_SAM_LOCAL"

  DEVENVNAME:
    Type: String
    Description: Developer environment where code is being executed (OSX, Windows, or Linux).
    Default: "OSX"
  DYNAMODBURL:
    Type: String
    Description: 실행 환경에 따른 DynamoDB Endpoint
    Default: "https://dynamodb.ap-northeast-2.amazonaws.com"
  DYNAMODBHOST:
    Type: String
  DYNAMODBPORT:
    Type: String
  DBPROTOCAL:
    Type: String
    Description: DynamoDB 연결 프로토콜
    Default: "http:"
  DEPLOYSTAGE:
    Type: String
    Description: 배포 스테이지
    Default: "Stg"
  DOMAINNAME:
    Type: String
    Description: 도메인 이름
    Default: "gonggong99.store"
  S3BUCKETNAME:
    Type: String
    Description: S3 버킷 이름
    Default: "jang-nanugi-front"

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowMethods: "'POST, GET, PUT, DELETE, OPTIONS'"
        AllowHeaders: "'Content-Type, Authorization, X-Forwarded-For, X-Api-Key, X-Amz-Security-Token, GongGong99-AccessToken, GongGong99-RefreshToken, Set-Cookie'"
        AllowOrigins: "'https://gonggong99.store', 'http://localhost:5173'"
        ExposeHeaders: "'Content-Type, Authorization, X-Forwarded-For, X-Api-Key, X-Amz-Security-Token, GongGong99-AccessToken, GongGong99-RefreshToken, Set-Cookie'"
        AllowCredentials: true

  ApiGatewayProdStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGatewayApi
      StageName: GongGong99Prod
      AutoDeploy: true

  ApiGatewayStgStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGatewayApi
      StageName: GongGong99Stg
      AutoDeploy: true

  CreateCoBuyingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: 공구방 생성 함수
    Properties:
      FunctionName: !Sub "${DEPLOYSTAGE}-CreateCoBuyingFunction"
      CodeUri: event-func/control/cobuying
      Handler: saveCoBuyingOneCTL.createCoBuyingHandler
      Runtime: nodejs20.x
      MemorySize: 2048
      Timeout: 20
      Architectures:
        - x86_64
      Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
        CreateCoBuying:
          Type: HttpApi
          Properties:
            Path: /api/co-buying
            Method: post
            ApiId: !Ref ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoBuyingTableName
        - S3CrudPolicy:
            BucketName: !Ref S3BUCKETNAME
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - saveCoBuyingOneCTL.ts

  AuthenticateOwnerAuthFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: 공구장 인증 함수
    Properties:
      FunctionName: !Sub "${DEPLOYSTAGE}-AuthenticateOwnerAuthFunction"
      CodeUri: event-func/control/auth
      Handler: authenticateOwnerAuthCTL.authenticateOwnerAuth
      Runtime: nodejs20.x
      MemorySize: 2048
      Timeout: 20
      Architectures:
        - x86_64
      Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
        AuthenticateOwnerAuth:
          Type: HttpApi
          Properties:
            Path: /api/co-buying/auth/{coBuyingId}
            Method: post
            ApiId: !Ref ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoBuyingTableName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - authenticateOwnerAuthCTL.ts

  ValidateRefreshTokenFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: 리프레시 토큰 검증 함수
    Properties:
      FunctionName: !Sub "${DEPLOYSTAGE}-ValidateRefreshTokenFunction"
      CodeUri: event-func/control/auth
      Handler: validateRefreshTokenCTL.validateRefreshTokenCTL
      Runtime: nodejs20.x
      MemorySize: 2048
      Timeout: 20
      Architectures:
        - x86_64
      Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
        ValidateRefreshToken:
          Type: HttpApi
          Properties:
            Path: /api/refresh
            Method: get
            ApiId: !Ref ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoBuyingTableName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - validateRefreshTokenCTL.ts

  ApplicationsInCoBuyingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: 공구방 참여 함수
    Properties:
      FunctionName: !Sub "${DEPLOYSTAGE}-ApplicationsInCoBuyingFunction"
      CodeUri: event-func/control/application
      Handler: applicationsInCoBuyingCTL.applicationsInCoBuyingHandler
      Runtime: nodejs20.x
      MemorySize: 2048
      Timeout: 20
      Architectures:
        - x86_64
      Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
        ApplicationsInCoBuying:
          Type: HttpApi
          Properties:
            Path: /api/co-buying/applications
            Method: post
            ApiId: !Ref ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoBuyingTableName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - applicationsInCoBuyingCTL.ts

  GetCoBuyingDetailFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: 공구방 생성 함수
    Properties:
      FunctionName: !Sub "${DEPLOYSTAGE}-GetCoBuyingDetailFunction"
      CodeUri: event-func/control/cobuying
      Handler: queryCoBuyingDetailOneCTL.getCoBuyingDetailHandler
      Runtime: nodejs20.x
      MemorySize: 2048
      Timeout: 20
      Architectures:
        - x86_64
      Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
        GetCoBuyingDetail:
          Type: HttpApi
          Properties:
            Path: /api/co-buying/{coBuyingId}
            Method: get
            ApiId: !Ref ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoBuyingTableName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - queryCoBuyingDetailOneCTL.ts

  GetCoBuyingListFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Description: 공구방 생성 함수
    Properties:
      FunctionName: !Sub "${DEPLOYSTAGE}-GetCoBuyingListFunction"
      CodeUri: event-func/control/cobuying
      Handler: queryCoBuyingListCTL.getCoBuyingListHandler
      Runtime: nodejs20.x
      MemorySize: 2048
      Timeout: 20
      Architectures:
        - x86_64
      Events: # API Gateway 이벤트 설정으로 암시적 생성 -> 자동 생성
        GetCoBuyingList:
          Type: HttpApi
          Properties:
            Path: /api/co-buying/page
            Method: get
            ApiId: !Ref ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoBuyingTableName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - queryCoBuyingListCTL.ts

  CoBuyingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${DEPLOYSTAGE}-CoBuyingTable"
      AttributeDefinitions:
        - AttributeName: createdAt # 공구글 생성일로 파티셔닝
          AttributeType: S
        - AttributeName: id
          AttributeType: S # ID
        - AttributeName: ownerName
          AttributeType: S # 공구장 이름
        - AttributeName: createdAtId
          AttributeType: S # 생성일자와 id
        - AttributeName: deadlineId
          AttributeType: S # 마감일자와 id
        - AttributeName: deletedYN
          AttributeType: S # 삭제 여부
      KeySchema:
        - AttributeName: ownerName
          KeyType: HASH # 파티션 키는 ownerName
        - AttributeName: id
          KeyType: RANGE # 정렬 키는 createdAt#id
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: createdAt
              KeyType: HASH # 파티션 키는 createdAt
            - AttributeName: id
              KeyType: RANGE # 정렬 키는 id
          Projection:
            ProjectionType: ALL # 인덱스에 모든 속성 포함
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: DeadlineIndex
          KeySchema:
            - AttributeName: deletedYN
              KeyType: HASH # 파티션 키는 deadline
            - AttributeName: deadlineId
              KeyType: RANGE # 정렬 키는 id
          Projection:
            ProjectionType: ALL # 인덱스에 모든 속성 포함
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: PagenationIndex
          KeySchema:
            - AttributeName: deletedYN
              KeyType: HASH # 파티션 키는 deletedYN
            - AttributeName: createdAtId
              KeyType: RANGE # 정렬 키는 createdAtId
          Projection:
            ProjectionType: ALL # 인덱스에 모든 속성 포함
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiGatewayApiUrlProd:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/GongGong99Prod/"
  ApiGatewayApiUrlStg:
    Description: "API Gateway endpoint URL for Stg stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/GongGong99Stg/"
  CreateCoBuyingFunction:
    Description: "Create CoBuying Lambda Function ARN"
    Value: !GetAtt CreateCoBuyingFunction.Arn
  CreateCoBuyingFunctionIamRole:
    Description: "Implicit IAM Role created for Create CoBuying function"
    Value: !GetAtt CreateCoBuyingFunctionRole.Arn
